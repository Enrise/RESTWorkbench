<ul class="togglers">
    <li>
        <a rel="oauth" href="">Toggle OAuth form</a>
    </li>
    <li>
        <a rel="misc" href="">Toggle settings form</a>
    </li>
    <?php
    if (Workbench_Model_Application::isDevelopment()) {
    ?>
    <li>
        <a rel="colorchange" href="">Toggle style form</a>
    </li>
    <?php
    }
    ?>
</ul>
<?php
$form = new Zend_Form(array(
    'decorators' => array('Description', 'FormElements', 'Fieldset', 'Form'),
    'legend' => 'OAuth',
    'description' => 'OAuth settings',
    'elementDecorators' => array('ViewHelper', 'Label', 'Description', 'HtmlTag'),
    'attribs' => array(
        'class' => 'formtastic config',
        'id' => 'oauth',
    ),
));
$form->addElement('text', 'consumerkey', array('label' => 'OAuth Consumerkey'));
$form->addElement('text', 'consumersecret', array('label' => 'OAuth Consumersecret'));
$form->addElement('text', 'requestTokenUrl', array(
    'label' => 'OAuth Request token URL',
    'description' => 'http://term.ie/oauth/example/request_token.php'
));
$form->addElement('text', 'accessTokenUrl', array(
    'label' => 'OAuth Access token URL',
    'description' => 'http://term.ie/oauth/example/access_token.php'
));
$form->addElement('select', 'headerOrUrl', array(
    'label' => 'OAuth Signing build',
    'multiOptions' => array(
        'header' => 'Header',
        'url' => 'URL',
        //'post' => 'POST', //Is this one needed and valid?!
)));
$form->addElement('select', 'signing', array(
    'label' => 'OAuth Signing method',
    'multiOptions' => array(
        'sha1' => 'SHA1',
        'rsa' => 'RSA',
        'plaintext' => 'Plaintext'
)));

$form->setElementsBelongTo('oauth');
$form->addElement('text', 'realm', array('label' => 'OAuth Realm (Optional)'));
$form->populate(Workbench_Model_Workbench_Endpoint::getOauth());

$form->addElement('submit', 'closeOauth', array(
    'label' => '✓',
    'class' => 'close'
))->getElement('closeOauth')->removeDecorator('Label');

echo $form;

$form = new Zend_Form(array(
    'decorators' => array('Description', 'FormElements', 'Fieldset', 'Form'),
    'legend' => 'Settings',
    'description' => 'Misc settings',
    'elementDecorators' => array('ViewHelper', 'Label', 'Description', 'HtmlTag'),
    'attribs' => array(
        'class' => 'formtastic config',
        'id' => 'misc',
    ),
));
$form->addElement('text', 'timeout', array(
    'label' => 'Connection timeout',
    'description' => 'seconds',
    'attribs' => array(
        'class' => 'small',
        'maxlength' => 2
    ),
));
$baseUrls = $this->apiHosts;
if (count($baseUrls)) {
    $form->addElement('select', 'host', array(
        'label' => 'API host',
        'multiOptions' => array_combine($baseUrls, $baseUrls),
        'value' => $this->registry()->query('settings.workbench.apiHost', ''),
        'attribs' => array(
            'class' => 'api-host',
        )
    ));
}
$form->addElement('submit', 'closeMisc', array(
    'label' => '✓',
    'class' => 'close'
))->getElement('closeMisc')->removeDecorator('Label');
$form->setElementsBelongTo('misc');
echo $form;

if (Workbench_Model_Application::isDevelopment()) {
    $form = new Zend_Form(array(
        'decorators' => array('FormElements', array(array('colorchange' => 'ViewHelper'), array('helper' => 'placeholder')), 'Fieldset', 'Form'),
        'legend' => 'Colors!',
        'elementDecorators' => array('ViewHelper', 'Label', 'Description', 'HtmlTag'),
        'attribs' => array(
            'class' => 'formtastic config',
            'id' => 'colorchange'
        ),
        'name' => 'colorchange',
    ));
    $form->getDecorator('Fieldset')->setOption('id', null);

    $form->addElement('text', 'styleColor', array(
        'label' => 'background color',
        'attribs' => array('class' => 'color'),
    ));
    $form->addElement('text', 'fontColor', array(
        'label' => 'font color',
        'attribs' => array('class' => 'color'),
    ));
    $methods = array('GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS', 'HEAD');
    $methods = array_change_key_case(array_combine($methods, $methods), CASE_LOWER);

    $form->addElement('select', 'styleMethod', array(
        'label' => 'HTTP method',
        'multiOptions' => $methods,
    ));
    $form->addElement('checkbox', 'styleAll', array(
        'label' => 'All methods?',
    ));
    $form->getElement('styleAll')->getDecorator('Label')->setOption('placement', 'APPEND');
    $form->getElement('styleAll')->getDecorator('ViewHelper')->setOption('placement', 'PREPEND');

    $form->addElement('reset', 'resetStyles', array(
        'label' => 'Reset colors',
    ))->removeDecorator('Label');

    $form->addElement('button', 'copyToClipboard', array(
        'label' => 'Copy to clipboard',
    ))->getElement('copyToClipboard')->removeDecorator('Label');

    $form->addElement('button', 'showStyles', array(
        'label' => 'Toggle stylesheet rules',
    ))->getElement('showStyles')->addDecorator(array(
        'container' => 'HtmlTag')
    , array(
        'placement' => 'append',
        'class' => 'hidden',
        'id' => 'showStylesContainer'
    ))->removeDecorator('Label');

    $form->addElement('submit', 'closeStyles', array(
        'label' => '✓',
        'class' => 'close'
    ))->getElement('closeStyles')->removeDecorator('Label');

    echo $form;
}