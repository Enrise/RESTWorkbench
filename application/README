Copy the Workbench module to your modules directory.
Copy the workbench.ini to your config folder.
Modify the config to suit your needs.
Add the following line to your application.ini: resources.frontController.controllerDirectory.workbench = GLITCH_MODULES_PATH "/Workbench/Controller"
Copy the public/workbenchResoures folder to your public folder.

Open your workbench with http://foo.bar/workbench.

Documentation details:

First piece till the first @<field> will be shown as extended documentation.
@hint: small descriptive text visible when the resource/collection is in listed style.
@disabled: disable the REST entrypoint so no communication will be possible. Documentation will still be available.
@param: <fieldname> <field description> <{optional}> <{example: 18489}>. By default each field is required unless the {optional} string is found.
@query: <fieldname> <field description> <{optional}> <{example: 18489}>
@accept: the accept header the REST service accepts. If you have specific formats that you accept you can pass those along by using +@format at the end of the accept header
@format: Pipe | separated list of formats the REST service accepts.
@url: the full URL to the location where the resource/collection can be found. Dynamic fields can be inserted by using the @param fieldname in the url wrapped with {}. Ex supplier/{supplier_id}.
Querystring data will be appended to this URL

Sample docblock

    /**
     * Fetch a single supplier from AutoTrack.nl
     * It may contain bulk data
     *
     * @hint Get a single supplier
     * @param supplier_id The supplier (aanbieder) id
     * @accept application/vnd.autotrack.supplier+@format
     * @format xml|json
     * @url /cardata/supplier/{supplier_id}
     */
    public function resourceGetAction() {
        //do stuff
    }